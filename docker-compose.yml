# =========================================
# Docker Compose for Development Environment
# =========================================
version: '3.8'

services:
  # Redis Session Store for Session Isolation
  redis:
    image: redis:7.2-alpine
    container_name: dominate-leads-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --appendfsync everysec --maxmemory 256mb --maxmemory-policy allkeys-lru
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - app-network
    sysctls:
      - net.core.somaxconn=1024

  # Next.js Application
  nextjs-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
      args:
        - NODE_VERSION=20.18.0
        - ALPINE_VERSION=3.20
        - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
        - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
    container_name: dominate-leads-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - DOCKER_CONTAINER=true
      - PERFORMANCE_LOG_STDOUT=true
      # Redis Session Store Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_URL=redis://redis:6379
      # Session Security Configuration
      - SESSION_STORE_TYPE=redis
      - SESSION_SECURITY_ENABLED=true
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      # Optional: Mount logs directory for debugging
      - ./logs:/app/logs:rw
    networks:
      - app-network

  # Optional: Nginx reverse proxy for production-like setup
  nginx:
    image: nginx:alpine3.20
    container_name: dominate-leads-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      # Add SSL certificates if available
      # - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - nextjs-app
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  logs:
    driver: local
  redis-data:
    driver: local